#!/usr/bin/env node

// Dependencies
var assert = require('assert');

var data = {};

// Load basic info.
data.tracks = require('../data/tracks.json');
data.artists = require('../data/artists.json');
data.individuals = require('../data/individuals.json');
data.releases = require('../data/releases.json');

// Load relation data
data.at = require('../data/artist_track.json');
data.ia = require('../data/individual_artist.json');
data.it = require('../data/individual_track.json');
data.tr = require('../data/track_release.json');

// Store keys object since I think we'll need it a lot.
data.keys = Object.keys(data);

assert.equal(data.keys.length, 8, 'data.keys has unexpected length: ' + data.keys.length);

data.keys.forEach(function(key) {
  assert.ok(data[key].length, 'data.' + key + ' has zero or undefined length');
});

// Check that all instances of basic are included in relation as propName.
// For example, all instances of 'artists' included in 'at' as 'artistId'
data.included = function (basic, relation, propName) {

  var related = function (basicValue) {

    var _idInRelatedTable = function (relationValue) {
      return relationValue[propName] === basicValue._id;
    };

    var rv = data[relation].some(_idInRelatedTable);

    if (! rv) {
      console.log('`' + basic + '` contains _id ' + basicValue._id + ' but it is not found in `' + relation + '` as `' + propName + '`');
    }

    return rv;
  };

  return data[basic].every(related);
};

//TODO: Correct/expand data so that all of these are true.
// All artists should have tracks.
assert.ok(data.included('artists', 'at', 'artist_id'));
// All tracks should have artists.
assert.ok(data.included('tracks', 'at', 'track_id'));
// All artists have individuals. (Not all individuals are members of artists, though.)
// assert.ok(data.included('artists', 'ia', 'artist_id'));
// All individuals are associated with at least one track.
//////assert.ok(data.included('individuals', 'it', 'individual_id'));
// All tracks are on at least one release.
assert.ok(data.included('tracks', 'tr', 'track_id'));
// All releases have at least one track.
assert.ok(data.included('releases', 'tr', 'release_id'));

// TODO: Make sure that all artist IDs that appear in artist_track actually exist in artists, etc.
// TODO: Make sure that all _ids are unique
// TODO: Make sure that all required fields are present in every entry
